Webassembly, OpenGL y Qt - Un cubo interactivo en la web
========================================================

:date: 2021-01-19 10:30
:tags: c++, wasm, qt, web
:slug: emscripten-cube

.. contents::

Hace mucho tiempo publiqu√© un tweet que tuvo cierta tracci√≥n, en √©l mostraba
un cubo interactivo en el navegador que hab√≠a hecho con C++. La magia detr√°s
de ese cubo era una aplicaci√≥n de Qt compilada para Webassembly utilizando un
visor de OpenGL.

.. raw:: html

    <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Here it is, a little <a href="https://twitter.com/conan_io?ref_src=twsrc%5Etfw">@conan_io</a>/<a href="https://twitter.com/jfrog?ref_src=twsrc%5Etfw">@jfrog</a>/<a href="https://twitter.com/isocpp?ref_src=twsrc%5Etfw">@isocpp</a> cube running in Chrome compiled to <a href="https://twitter.com/hashtag/webassembly?src=hash&amp;ref_src=twsrc%5Etfw">#webassembly</a> using <a href="https://twitter.com/hashtag/Qt?src=hash&amp;ref_src=twsrc%5Etfw">#Qt</a> ü§†. Just a couple of steps thanks to the packages and recipes provided by <a href="https://twitter.com/bincrafters?ref_src=twsrc%5Etfw">@bincrafters</a> ü§ü I&#39;ll write a making of, promise. <a href="https://t.co/0XPbifrant">pic.twitter.com/0XPbifrant</a></p>&mdash; jgsogo (@jgsogo) <a href="https://twitter.com/jgsogo/status/1089562018355527680?ref_src=twsrc%5Etfw">January 27, 2019</a></blockquote> 
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

En aquel momento dije que documentar√≠a el proceso, pero no lo hice. Hoy, casualidades
del destino, me siento en deuda con esto de nuevo y ha llegado el momento de comentar
c√≥mo se hizo... aunque haya que hacerlo de nuevo porque perd√≠ el c√≥digo fuente üòÖ.

He conseguido reproducir el proyecto de una manera m√°s ordenada y quiz√° algunas de las
cosas que se utlizan aqu√≠ podr√≠an incorporarse a los paquetes correspondientes de 
`ConanCenter`_, aunque √©se no es el objetivo de este post ni condici√≥n para publicarlo.

.. _ConanCenter: https://conan.io/center

Las tecnolog√≠as que he utilizado, como ya avanzaba, han sido el conocido framework `Qt`_
y `Emscripten`_ para compilar el c√≥digo a Webassembly. Con Qt es muy sencillo hacer una 
aplicaci√≥n de escritorio con un canvas de OpenGL en el que mostrar un cubo, con Emscripten
resulta trivial compilar un proyecto para Webassembly y utilizar el navegador para
renderizarlo. ¬øSer√° muy complicado juntar ambos?

.. _Qt: https://qt.io
.. _Emscripten: https://emscripten.org/index.html


**Nota.- La documentaci√≥n recomienda utilizar versiones de las diferentes herramientas
que hayan sido probadas conjuntamente y se sepa que funcionan. En este blogpost seguir√©
esta recomendaci√≥n, aunque algunas otras combinaciones tambi√©n me han funcionado.**

**Nota.- El proceso ha sido probado en Macos, es esperable que en otros sistemas operativos
sea algo parecido. De cualquier forma, son bienvenidos los comentarios para actualizar esta
publicaci√≥n e incluir m√°s casos de uso.**

Emscripten
----------

El primer paso consiste en preparar Emscripten para compilar c√≥digo C++ a Webassembly. El
proceso es muy sencillo y basta con seguir la `documentaci√≥n`_ disponible en la web:

.. _documentaci√≥n: https://emscripten.org/docs/getting_started/downloads.html

.. code-block:: bash

   git clone https://github.com/emscripten-core/emsdk.git
   cd emsdk
   git pull
   ./emsdk install 1.39.8
   ./emsdk activate 1.39.8

Esta versi√≥n de Emscripten utiliza tambi√©n Python3 aunque no lo instala, versiones m√°s
nuevas lo incluyen vendorizado. Suponemos que el lector si no lo tiene ya disponible en
el ``PATH`` sabe c√≥mo conseguirlo.

En este proceso es importante notar el fichero ``emsdk_env.sh`` que ha sido generado
anteriormente. Este fichero es un **script para activar Emscripten como entorno de
desarrollo**, a√±adir√° al ``PATH`` algunos directorios y variables de entorno para utlizar
los compiladores y herramientas que nos permitir√°n generan Webassembly.

Se recomienda al lector que pruebe algunos ejemplos b√°sicos del `getting started`_
para verificar que el compilador funciona y tener una primera experiencia con el proceso.

.. _getting started: https://emscripten.org/docs/getting_started/Tutorial.html

Qt
--

El siguiente paso es compilar Qt para Webassembly. En realidad lo que haremos es compilar
para nuestro sistema operativo el *build-system* ``qmake`` configurado como *cross*-compilador
que utiliza Webassembly como *target*. Suena m√°s complicado de lo que es, podemos seguir
los pasos `este tutorial`_.

.. _este tutorial: https://doc.qt.io/qt-5/wasm.html

En primer lugar deberemos activar Emscripten como indicamos anteriormente:

.. code-block:: bash

   source emsdk/emsdk_env.sh
   emcc -v

Y descargar y compilar Qt para Webassembly:

.. code-block:: bash

   wget http://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz
   xz -d qt-everywhere-src-5.15.2.tar.xz
   tar xopf qt-everywhere-src-5.15.2.tar

   cd qt-everywhere-src-5.15.2
   ./configure -xplatform wasm-emscripten -nomake examples -nomake tests -prefix $(pwd)/qtbase
   make -j16 module-qtbase module-qtdeclarative

El proceso anterior tomar√° su tiempo, aprovecha para repasar alg√∫n ejemplo con Emscripten o refrescar
tus conocimientos de Qt. Tal vez sea un buen momento para buscar un ``Hello World!`` sencillo y ver c√≥mo
funciona `qmake` con los ficheros `.pro` para generar las aplicaciones de Qt. Ser√° √∫til en lo que viene
a continuaci√≥n.

Una vez terminado el proceso anterior deber√≠a haberse generado **el ejecutable ``qtbase/bin/qmake``, √©ste
es nuestro *build-system* preparado para *cross*-compilar utilizando Emscripten**.

Si creaste ese peque√±o ``Hello world!``, ahora es el momento de comprobar que todo funciona. Dentro de su
directorio s√≥lo tienes que ejecutar:

.. code-block:: bash

   cd hello-world
   .../qtbase/bin/qmake
   make

Ahora no tienes m√°s que abrir el fichero ``.html`` con tu navegador de cabecera. ¬°*Voil√°*! Lo que antes
era una aplicaci√≥n de escritorio se ha convertido en una applicaci√≥n web. El mismo c√≥digo en C++ lo
hemos utilizado para generar una aplicaci√≥n para dos plataformas totalmente diferentes... esto abre
un **horizonte de posibilidades muy interesante para explorar**.


Aplicaci√≥n
----------

Ya tenemos todas las piezas disponibles y √∫nicamente nos falta el cubo. El cubo no es m√°s que una
aplicaci√≥n de Qt con una ventana de OpenGL. Yo utilic√© como base el `ejemplo de OpenGL ES 2.0`_, 
cambi√© la textura e hice unos ajustes.

.. _`ejemplo de OpenGL ES 2.0`: https://doc.qt.io/qt-5/qtopengl-cube-example.html

En `este repositorio`_ pod√©is encontrar el c√≥digo fuente que yo utilic√©. Utilizando los pasos
anteriores deber√≠a compilarse una aplicaci√≥n para Webassembly que pod√©is abrir en vuestro
navegador:

.. _`este repositorio`: https://github.com/jgsogo/qt-opengl-cube/tree/main/qt-opengl-example

.. code-block:: bash

   git clone https://github.com/jgsogo/qt-opengl-cube.git
   cd qt-opengl-cube/qt-opengl-example
   .../qtbase/bin/qmake
   make


**Nota.- Todav√≠a tengo que pulir algunos detalles en el blogpost y comprobar que no me he saltado
ning√∫n paso en la explicaci√≥n.** Si eres de los primeros en llegar por aqu√≠, ten en cuenta que en 
el futuro probablemente actualice el art√≠culo a√±adiendo algunos detalles (optimizaciones para que
la ejecuci√≥n sea m√°s r√°pida, c√≥mo ejecutar todo el proceso con Conan en una √∫nica l√≠nea, m√°s detalles
sobre Webassembly, otras versiones de las aplicaciones,...). Stay tuned!
